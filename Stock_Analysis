# Ehinmore Adebameno Portfolio on Financial Analysis

# Project - Portfolio Optimization
In this project, I will build two $10,000 investment portfolios containing four stocks. The first portfolio will have an equal weighting between the stocks. The second portfolio will be optimized with a weighting allocation that provides the best return, adjusted for risk. To build these two portfolios, I will:
1. Import two years of data for four stocks
2. Build the initial portfolio with equal weighting to each of the stocks
3. Analyze and visualize the equal-weighted portfolio
4. Generate 10,000 portfolio scenarios with random weighting to each of the stocks
5. Identify the optimal portfolio from the scenarios and visualize the results

## Import packages needed for this project
import pandas as pd
import numpy as np
import pandas_datareader.data as pdr
import matplotlib.pyplot as plt
import yfinance as yf
import datetime as dt
import pandas_datareader as pdr
%matplotlib inline

## Lets find out more information about our stocks
The four stocks of interest are:
1. Advanced Micro Devices, Inc. - Common Stock(AMD)
2. Apple Inc. - Common Stock(AAPL)
3. Microsoft Corporation - Common Stock(MSFT)
4. Oracle Corporation Common Stock(ORCL)

nasdaq_sym = pdr.nasdaq_trader.get_nasdaq_symbols()
nasdaq_sym.loc['AMD']
nasdaq_sym.loc['AAPL']
nasdaq_sym.loc['MSFT']
nasdaq_sym.loc['ORCL']

# Import two years of data for the four stock from yahoo finance
# Set start and end date parameters
startdate = dt.datetime(2020,1,1)
enddate = dt.datetime(2021,12,31)
# List the four stock ticker symbols for our portfolio
stock_list = ['AMD','AAPL','MSFT','ORCL']

# Create an empty dictionary to store our stock info
stocks = {}

# Loop through each stock in the stock_list and return the Adj Close
for i_stock in stock_list:
    stocks[i_stock] = yf.download(i_stock,startdate,enddate)[['Adj Close']]

# Examine the 'AMD' Adj Close from the stocks dictionary
stocks['AMD'].head()

## Create the Equal-Weighted Portfolio

To create the equal-weighted portfolio, we need to add some additional columns to the DataFrames in the `stocks` dictionary. The three columns that we will build are:

- Normalized Return = Adjusted Close / Adjusted Close on the `startdate` of the portfolio
- Allocation = Normalized Return * 0.25 (equal weighting for each of the four stocks)
- Position Value = Allocation * 10,000 (value of the portfolio)

stock_data.iloc[0]['Adj Close']
stock_data['Adj Close']/stock_data.iloc[0]['Adj Close']

# Create 'Normalized Return' column for each stock
for stock_name, stock_data in stocks.items():
    stock_data['Normalized Return'] = stock_data['Adj Close']/stock_data.iloc[0,:]['Adj Close']
    
stocks['AAPL'].head()

# Create allocation for each stock - equally weighted in our initial portfolio
for stock_name, stock_data in stocks.items():
    stock_data['Allocation'] = stock_data['Normalized Return'] * 0.25
    
stocks['MSFT']

# Set the value of the portfolio to $10k
for stock_name, stock_data in stocks.items():
    stock_data['Position Value'] = stock_data['Allocation'] * 10000

stocks['ORCL'].head()
## Visualize the Portfolio Performance
To visualize the performance of the portfolio, we can create two line charts that show the return of the portfolio and the return if individual stock over time, as well as total vale for the portfolio

# Create position_values dictionary
position_values = {}

for stock_name, stock_data in stocks.items():
    position_values[stock_name] = stock_data['Position Value']
# Convert the position_values dictionary to a DataFrame
position_values = pd.DataFrame(data=position_values)
position_values.head()

# Add 'Total' column to position values, summing the other columns
position_values['Total'] = position_values.sum(axis=1)

position_values.head()

# View the total portfolio
plt.figure(figsize=(12,4))
plt.plot(position_values.iloc[:,0:4])
plt.title('Equal-Weighted Portfolio Stock Performance')
plt.xlabel('Total Value')
plt.ylabel('Date');

## Calculate Performance Metrics for the Portfolio
Now that we have created and visualized the equal-weighted portfolio, we can calculate a few metrics to further measure the performance of the portfolio. We will create five performances metrics:
 * Cumulative Return
 * Mean Daily Return
 * Standard Deviation Daily Return
 * Sharpe Ratio
 * Annualized Sharpe Ratio
 
 # Define the end and start value of the portfolio
start_value = position_values['Total'][0]
end_value = position_values['Total'][-1]

# Calculate the cumulative portfolio return as a percentage
cummulative_return = end_value/start_value - 1
print(cummulative_return)

# Create a 'Daily Returns' column
position_values['Daily Returns'] = position_values['Total'].pct_change()
position_values.head()

# Calculate the mean Daily Return 
mean_daily_return = position_values['Daily Returns'].mean()

print('The mean daily return is:', str(mean_daily_return))

# Calculate the standard deviation of Daily Return 
std_daily_return = position_values['Daily Returns'].std()

print('The std daily return is:'')

